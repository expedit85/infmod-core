package br.ufrj.ppgi.greco.infmod;

import com.hp.hpl.jena.rdf.model.Model;


public interface UpdatePolicy
{
	public static final int INITIAL_MODEL_METHOD = 1;
	public static final int MODEL_BEFORE_REASONING_METHOD = 2;
	public static final int PUBLISHING_MODE_METHOD = 4;
	public static final int ALL_METHODS = (1+2+4);
	
	
	/**
	 * This method should return true if the given method modifies the curModel parameter.
	 * 
	 * Returns false tells SPARQL Server's fast updates are allowed (curModel is shared between
	 * Fuseki and UpdatePolicy as a read-only graph).
	 *  
	 * @return false if no changes are made to the curModel parameter in the selected method,
	 * true otherwise.
	 */
	public boolean isCurrentModelChanged(int methodsMask);
	

	/**
	 * Should return the initial Model, i.e., the one which the new loaded data will be merged with.
	 * It may be empty (no triples), static (always the same triples),
	 * dynamic (triples generated at the time of calling), a subset of curModel or the curModel
	 * object itself. It will not be modified by InferenceModule.
	 * 
	 * Note, however, there is not warranty about the order, i.e., this method may be called before
	 * or after query executions. This occurs because their execution are made by one or more loaders
	 * assynchronously and are synchronized only when getting results.  
	 * 
	 * @param curModel the Model containing the triples currently published by the SPARQL server.
	 * This may be the same object used by the SPARQL server if fast update is enabled (sharing) or
	 * a whole copy otherwise. If this parameter suffers any modification into this method the
	 * {@link #isCurrentModelChanged(int)} method must return true for {@link #INITIAL_MODEL_METHOD}.
	 * 
	 * @return the initial Model.
	 */
	public Model getInitialModel(Model curModel);
	
	
	/**
	 * Should return the Model which will be used by the reasoner.
	 *
	 * It is called after the query results have been merged with the Model returned by the
	 * {@link #getInitialModel(Model)} method.
	 * 
	 * @param curModel   curModel the Model containing the triples currently published by SPARQL server.
	 * If this object is modified it must be reflected in {@link #isCurrentModelChanged(int)} 
	 * for {@link #MODEL_BEFORE_REASONING_METHOD} as described before.
	 * 
	 * @param queryModel the Model returned by the {@link #getInitialModel(Model)} method plus the
	 * query results.
	 *                   
	 * @return the Model which will be used by the reasoner. If curModel is returned, 
	 * the queryModel is used.
	 */
	public Model getModelBeforeReasoning(Model curModel, Model queryModel);


	/**
	 * Should return the Model which will be published by the SPARQL server.
	 * 
	 * @param curModel   curModel the Model containing the triples currently published by SPARQL server.
	 * If this object is modified it must be reflected in {@link #isCurrentModelChanged(int)} 
	 * for {@link #PUBLISHING_MODE_METHOD} as described before.
	 * 
	 * @param queryModel the Model returned by the {@link #getInitialModel(Model)} method plus the
	 * query results.
	 *
	 * @param inferredModel the Model generated by the inference engine.
	 * 
	 * @return the Model which will be published by the SPARQL server. If one of curModel 
	 * or queryModel is returned, the inferredModel is used.
	 */
	public Model getPublishingModel(Model curModel, Model queryModel, Model inferredModel);
}
